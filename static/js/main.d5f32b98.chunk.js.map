{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Header.js","containers/App.js","actions.js","constants.js","registerServiceWorker.js","reducers.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","cats","console","log","map","user","i","src_components_Card","key","SearchBox","searchfield","searchChange","aria-label","type","placeholder","onChange","Header","nextProps","nextState","Component","App","this","props","onRequestCats","_this$props","searchField","onSearchChange","isPending","filteredCats","filter","cat","toLowerCase","includes","components_Header","components_SearchBox","lib","style","width","height","components_CardList","connect","state","searchCats","requestCats","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","initialStateSearch","initialStateCats","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.d5f32b98.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Card.css'\r\n\r\nconst Card = ({ name, email, id }) => {\r\n\treturn (\r\n\t\t<div className=\"tc bg-washed-yellow dib br3 pa3 ma3 dim bw2 shadow-5\">\r\n\t\t\t<img alt='cats' src={`https://robohash.org/${id}?set=set4&size=200x200`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2 className=\"f2\">{name}</h2>\r\n\t\t\t\t<p className=\"helvetica\">{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>)\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card.js'\r\n\r\nconst CardList = ({ cats })=> {\r\n\tconsole.log('CardList')\r\n\treturn (\r\n\t\t<div> \r\n\t\t{\r\n\t\t\tcats.map((user, i) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<Card \r\n\t\t\t\t\t\tkey={i} \r\n\t\t\t\t\t\tid={cats[i].id} \r\n\t\t\t\t\t\tname={cats[i].name} \r\n\t\t\t\t\t\temail={cats[i].email} \r\n\t\t\t\t\t\t/>\r\n\t\t\t\t);\r\n\t\t\t})\r\n\t\t}\r\n\t</div>\t\r\n\t);\r\n}\r\n\r\nexport default CardList","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) =>{\r\n\tconsole.log('SearchBox')\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t\t<input\r\n\t\t\taria-label='Search Cats'\r\n\t\t\tclassName='pa3 ba b--black bg-lightest-yellow ttc helvetica' \r\n\t\t\ttype='search' \r\n\t\t\tplaceholder='search cats'\r\n\t\t\tonChange={searchChange} \r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React, { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n\tshouldComponentUpdate(nextProps, nextState) {\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\trender() {\r\n\t\tconsole.log('Header');\r\n\t\treturn <h1 className=\"f1 marginTop\">CatFriends</h1>\r\n\t}\r\n}\r\n\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { setSearchField, requestCats } from '../actions.js'\r\n\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport { Scrollbars } from 'react-custom-scrollbars';\r\nimport Header from '../components/Header'\r\n\r\nimport './App.css';\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tsearchField: state.searchCats.searchField,\r\n\t\tcats: state.requestCats.cats,\r\n\t\tisPending: state.requestCats.isPending,\r\n\t\terror: state.requestCats.error\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestCats: () => dispatch(requestCats())\r\n\t}\r\n}\r\n\r\nclass App extends Component {\r\n\tcomponentDidMount() {\r\n\t\tthis.props.onRequestCats();\r\n\t}\r\n\r\n\trender () {\r\n\t\tconst { searchField, onSearchChange, cats, isPending } = this.props;\r\n\t\tconst filteredCats = cats.filter(cat => {\r\n\t\t\treturn cat.name.toLowerCase().includes(searchField.toLowerCase());\r\n\t\t});\r\n\t\treturn isPending ? \r\n\t\t<h1>Loading</h1> :\r\n\t\t(\r\n\t\t\t<div className=\"tc\">\r\n\t\t\t\t<Header />\r\n\t\t\t\t<SearchBox searchChange={onSearchChange} />\r\n\t\t\t\t<Scrollbars style={{ width:'100%', height:'80vh' }}>\r\n\t\t\t\t\t<CardList cats={filteredCats} />\r\n\t\t\t\t</Scrollbars>\r\n\t\t\t</div>\r\n\t\t);\t\r\n\t}\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_CATS_PENDING,\r\n\tREQUEST_CATS_SUCCESS,\r\n\tREQUEST_CATS_FAILED } from './constants.js';\r\n\r\nexport const setSearchField = (text) => ({ type: CHANGE_SEARCH_FIELD, payload: text })\r\n\r\nexport const requestCats = () => (dispatch) => {\r\n\tdispatch({ type: REQUEST_CATS_PENDING});\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response => response.json())\r\n\t\t.then(data => dispatch({ type: REQUEST_CATS_SUCCESS, payload: data }))\r\n\t\t.catch(error => dispatch({ type: REQUEST_CATS_FAILED, payload: error }))\r\n\t}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_CATS_PENDING = 'REQUEST_CATS_PENDING';\r\nexport const REQUEST_CATS_SUCCESS = 'REQUEST_CATS_SUCCESS';\r\nexport const REQUEST_CATS_FAILED = 'REQUEST_CATS_FAILED';\r\n\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}","import { \r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_CATS_PENDING,\r\n\tREQUEST_CATS_SUCCESS,\r\n\tREQUEST_CATS_FAILED } from './constants';\r\n\r\nconst initialStateSearch = {\r\n\tsearchField: ''\r\n}\r\n\r\nexport const searchCats = (state=initialStateSearch, action={}) => {\r\n\tswitch(action.type) {\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\treturn Object.assign({}, state, { searchField: action.payload })\r\n\t\tdefault: \r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nconst initialStateCats = {\r\n\tisPending: false,\r\n\tcats: [],\r\n\terror: ''\r\n}\r\n\r\nexport const requestCats = (state=initialStateCats, action={}) => {\r\n\tswitch(action.type) {\r\n\t\tcase REQUEST_CATS_PENDING:\r\n\t\t\treturn Object.assign({}, state, { isPending: true})\r\n\t\tcase REQUEST_CATS_SUCCESS: \r\n\t\t\treturn Object.assign({}, state, { cats: action.payload, isPending: false })\r\n\t\tcase REQUEST_CATS_FAILED:\r\n\t\t\treturn Object.assign({}, state, { error: action.payload, isPending: false })\r\n\t\tdefault: \r\n\t\t\treturn state;\r\n\t}\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport 'tachyons';\r\n\r\nimport App from './containers/App'\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport { searchCats, requestCats } from './reducers';\r\n\r\nimport './index.css';\r\n\r\nconst logger = createLogger();\r\n\r\nconst rootReducer = combineReducers({ searchCats, requestCats })\r\n\r\nconst store = \r\n\tcreateStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\r\n\r\nReactDOM.render(\r\n\t<Provider store={store}>\r\n\t\t<App/>\r\n\t</Provider>,\r\n\tdocument.getElementById('root')\r\n\t);\r\n\tregisterServiceWorker();"],"sourceRoot":""}